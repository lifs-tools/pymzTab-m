# coding: utf-8

"""
    mzTab-M reference implementation and validation API.

    This is the mzTab-M reference implementation and validation API service.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mztab_m_swagger_client.configuration import Configuration


class Instrument(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'Parameter',
        'source': 'Parameter',
        'analyzer': 'list[Parameter]',
        'detector': 'Parameter'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'source': 'source',
        'analyzer': 'analyzer',
        'detector': 'detector'
    }

    instances_by_id = {}

    def __init__(self, id=None, name=None, source=None, analyzer=None, detector=None, local_vars_configuration=None):  # noqa: E501
        """Instrument - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._source = None
        self._analyzer = None
        self._detector = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if analyzer is not None:
            self.analyzer = analyzer
        if detector is not None:
            self.detector = detector

        if id is not None:
            self.__class__.instances_by_id[id] = self

    @property
    def id(self):
        """Gets the id of this Instrument.  # noqa: E501


        :return: The id of this Instrument.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instrument.


        :param id: The id of this Instrument.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Instrument.  # noqa: E501


        :return: The name of this Instrument.  # noqa: E501
        :rtype: Parameter
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instrument.


        :param name: The name of this Instrument.  # noqa: E501
        :type: Parameter
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Instrument.  # noqa: E501


        :return: The source of this Instrument.  # noqa: E501
        :rtype: Parameter
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Instrument.


        :param source: The source of this Instrument.  # noqa: E501
        :type: Parameter
        """

        self._source = source

    @property
    def analyzer(self):
        """Gets the analyzer of this Instrument.  # noqa: E501

        The instrument's mass analyzer, as defined by the parameter.  # noqa: E501

        :return: The analyzer of this Instrument.  # noqa: E501
        :rtype: list[Parameter]
        """
        return self._analyzer

    @analyzer.setter
    def analyzer(self, analyzer):
        """Sets the analyzer of this Instrument.

        The instrument's mass analyzer, as defined by the parameter.  # noqa: E501

        :param analyzer: The analyzer of this Instrument.  # noqa: E501
        :type: list[Parameter]
        """

        self._analyzer = analyzer

    @property
    def detector(self):
        """Gets the detector of this Instrument.  # noqa: E501


        :return: The detector of this Instrument.  # noqa: E501
        :rtype: Parameter
        """
        return self._detector

    @detector.setter
    def detector(self, detector):
        """Sets the detector of this Instrument.


        :param detector: The detector of this Instrument.  # noqa: E501
        :type: Parameter
        """

        self._detector = detector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instrument):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Instrument):
            return True

        return self.to_dict() != other.to_dict()
