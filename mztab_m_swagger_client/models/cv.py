# coding: utf-8

"""
    mzTab-M reference implementation and validation API.

    This is the mzTab-M reference implementation and validation API service.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mztab_m_swagger_client.configuration import Configuration


class CV(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'label': 'str',
        'full_name': 'str',
        'version': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'full_name': 'full_name',
        'version': 'version',
        'uri': 'uri'
    }

    instances_by_id = {}

    def __init__(self, id=None, label=None, full_name=None, version=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """CV - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._label = None
        self._full_name = None
        self._version = None
        self._uri = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.label = label
        self.full_name = full_name
        self.version = version
        self.uri = uri

        if id is not None:
            self.__class__.instances_by_id[id] = self

    @property
    def id(self):
        """Gets the id of this CV.  # noqa: E501


        :return: The id of this CV.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CV.


        :param id: The id of this CV.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def label(self):
        """Gets the label of this CV.  # noqa: E501

        The abbreviated CV label.  # noqa: E501

        :return: The label of this CV.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CV.

        The abbreviated CV label.  # noqa: E501

        :param label: The label of this CV.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def full_name(self):
        """Gets the full_name of this CV.  # noqa: E501

        The full name of this CV, for humans.  # noqa: E501

        :return: The full_name of this CV.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this CV.

        The full name of this CV, for humans.  # noqa: E501

        :param full_name: The full_name of this CV.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and full_name is None:  # noqa: E501
            raise ValueError("Invalid value for `full_name`, must not be `None`")  # noqa: E501

        self._full_name = full_name

    @property
    def version(self):
        """Gets the version of this CV.  # noqa: E501

        The CV version used when the file was generated.  # noqa: E501

        :return: The version of this CV.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CV.

        The CV version used when the file was generated.  # noqa: E501

        :param version: The version of this CV.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version is None:  # noqa: E501
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def uri(self):
        """Gets the uri of this CV.  # noqa: E501

        A URI to the CV definition.  # noqa: E501

        :return: The uri of this CV.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CV.

        A URI to the CV definition.  # noqa: E501

        :param uri: The uri of this CV.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and uri is None:  # noqa: E501
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CV):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CV):
            return True

        return self.to_dict() != other.to_dict()
