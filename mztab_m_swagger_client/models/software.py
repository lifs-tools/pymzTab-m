# coding: utf-8

"""
    mzTab-M reference implementation and validation API.

    This is the mzTab-M reference implementation and validation API service.  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: nils.hoffmann@isas.de
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from mztab_m_swagger_client.configuration import Configuration


class Software(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'parameter': 'Parameter',
        'setting': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'parameter': 'parameter',
        'setting': 'setting'
    }

    instances_by_id = {}

    def __init__(self, id=None, parameter=None, setting=None, local_vars_configuration=None):  # noqa: E501
        """Software - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._parameter = None
        self._setting = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if parameter is not None:
            self.parameter = parameter
        if setting is not None:
            self.setting = setting

        if id is not None:
            self.__class__.instances_by_id[id] = self

    @property
    def id(self):
        """Gets the id of this Software.  # noqa: E501


        :return: The id of this Software.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Software.


        :param id: The id of this Software.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def parameter(self):
        """Gets the parameter of this Software.  # noqa: E501


        :return: The parameter of this Software.  # noqa: E501
        :rtype: Parameter
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this Software.


        :param parameter: The parameter of this Software.  # noqa: E501
        :type: Parameter
        """

        self._parameter = parameter

    @property
    def setting(self):
        """Gets the setting of this Software.  # noqa: E501

        A software setting used. This field MAY occur multiple times for a single software. The value of this field is deliberately set as a String, since there currently do not exist cvParams for every possible setting.   # noqa: E501

        :return: The setting of this Software.  # noqa: E501
        :rtype: list[str]
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this Software.

        A software setting used. This field MAY occur multiple times for a single software. The value of this field is deliberately set as a String, since there currently do not exist cvParams for every possible setting.   # noqa: E501

        :param setting: The setting of this Software.  # noqa: E501
        :type: list[str]
        """

        self._setting = setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Software):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Software):
            return True

        return self.to_dict() != other.to_dict()
